async def handle_server_message(self, message, writer):
        debug(f"Received message: {message}",True)
        try:
            data = json.loads(message)
            if data["type"] == "card_drawn":
                player = data["player"]
                card = data["card"]
                debug(f"Received card data: {card}",False)
                debug(f"Card art path: {self.images_path / card['art']}",False)
                debug(f"Card art exists: {(self.images_path / card['art']).exists()}",False)
                
                # Store the card data
                if player not in self.drawn_cards:
                    self.drawn_cards[player] = []
                self.drawn_cards[player].append(card)
                self.last_draw_time = pygame.time.get_ticks()  # Start animation
                debug(f"Card drawn for player {player}: {card}",False)
                debug(f"Current drawn cards: {self.drawn_cards}",False)
                
                # Test load the image immediately
                try:
                    image_path = self.images_path / card["art"]
                    if image_path.exists():
                        test_image = pygame.image.load(str(image_path))
                        debug(f"Successfully loaded test image: {test_image.get_size()}",False)
                    else:
                        debug(f"ERROR: Image file not found at {image_path}",True)
                except Exception as e:
                    debug(f"Error testing image load: {e}",True)
                    
            elif data["type"] == "turn_change":
                self.game_manager.current_player = data["current_player"]
                debug(f"Turn changed to player {self.game_manager.current_player}",False)
        except json.JSONDecodeError:
            if message == "Game started":
                debug("Game has started!",False)
                self.game_started = True
                # Wait a bit longer to ensure player number is set
                await asyncio.sleep(1.0)
            elif message == "Player disconnected":
                debug("Player disconnected",False)
                self.running = False
                # Optionally, you can add logic to reconnect or handle the disconnection gracefully
                debug("Player disconnected",False)
                self.running = False
            elif message.startswith("Player"):
                import re
                try:
                    # Extract leading digits from the second word after "Player"
                    player_str = message.split()[1]
                    match = re.match(r"(\d+)", player_str)
                    if match:
                        self.player_number = int(match.group(1))
                        debug(f"You are Player {self.player_number}",False)
                        # If game has already started, draw initial cards
                        if self.game_started:
                            debug(f"Game already started, drawing initial cards for player {self.player_number}",False)
                            await self.draw_initial_cards(writer)
                    else:
                        raise ValueError(f"No valid player number found in '{player_str}'")
                except ValueError as e:
                    debug(f"Error parsing player number: {e}",True)
                    self.running = False




                
    async def draw_game_state(self):
        self.screen.fill((255, 255, 255))
        
        # Calculate positions based on window size
        padding = int(self.window_width * 0.05)  # 5% padding
        card_spacing = int(self.window_width * 0.15)  # 15% spacing between cards
        
        # Draw player information
        player_text = f"Player {self.player_number}"
        turn_text = f"Current Turn: Player {self.game_manager.current_player}"
        self.screen.blit(self.font.render(player_text, True, (0, 0, 0)), (padding, padding))
        self.screen.blit(self.font.render(turn_text, True, (0, 0, 0)), (padding, padding * 2))

        # Draw cards for both players
        current_time = pygame.time.get_ticks()
        animation_progress = min(1.0, (current_time - self.last_draw_time) / self.draw_animation_duration)
        
        debug(f"Drawing cards: {self.drawn_cards}",False)
        for player, cards in self.drawn_cards.items():
            if not isinstance(cards, list):
                cards = [cards]  # Convert single card to list for compatibility
                
            # Calculate starting position based on player and current turn
            if player == self.player_number:
                # Current player's cards go from bottom right to bottom left
                start_x = self.window_width - padding - (len(cards) - 1) * (self.card_width + 10)
                y_pos = int(self.window_height * 0.7)  # Bottom of screen
            else:
                # Opponent's cards go from top left to top right
                start_x = padding
                y_pos = int(self.window_height * 0.3)  # Top of screen
                
            for i, card in enumerate(cards):
                if card and "art" in card:
                    try:
                        image_path = self.images_path / card["art"]
                        debug(f"Attempting to load image from: {image_path}",False)
                        debug(f"Image path exists: {image_path.exists()}",False)
                        debug(f"Image path is file: {image_path.is_file()}",False)
                        
                        if not image_path.exists():
                            debug(f"ERROR: Image file not found at {image_path}",True)
                            continue
                            
                        card_image = pygame.image.load(str(image_path))
                        debug(f"Successfully loaded image: {card_image.get_size()}",False)
                        
                        card_image = pygame.transform.scale(card_image, (self.card_width, self.card_height))
                        debug(f"Scaled image size: {card_image.get_size()}",False)
                        
                        # Calculate x position - for current player, cards go right to left
                        # for opponent, cards go left to right
                        x_pos = start_x + i * (self.card_width + 10)
                        
                        debug(f"Drawing card at position: ({x_pos}, {y_pos})",False)
                        # Draw card with animation
                        start_pos = (self.window_width // 2, self.window_height // 2)  # Start from center
                        end_pos = (x_pos, y_pos)
                        self.draw_card_with_animation(card_image, start_pos, end_pos, animation_progress)
                        
                        # Draw player label under/above the first card only
                        if i == 0:
                            player_label = self.font.render(f"Player {player}", True, (0, 0, 0))
                            label_pos = (x_pos + self.card_width // 2 - player_label.get_width() // 2,
                                       y_pos + (self.card_height + 10) if player == self.player_number else y_pos - 30)
                            self.screen.blit(player_label, label_pos)
                        
                    except Exception as e:
                        debug(f"Error loading card image: {e}",True)
                        # Draw a placeholder rectangle if image loading fails
                        rect = pygame.Rect(x_pos, y_pos, self.card_width, self.card_height)
                        pygame.draw.rect(self.screen, (200, 200, 200), rect)
                        error_text = self.font.render("Card", True, (0, 0, 0))
                        text_rect = error_text.get_rect(center=rect.center)
                        self.screen.blit(error_text, text_rect)

        pygame.display.flip()